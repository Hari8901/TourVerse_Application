package com.tourverse.backend.chat.service;

import com.tourverse.backend.chat.document.ChatMessage;
import com.tourverse.backend.chat.dto.ChatMessageDto;
import com.tourverse.backend.chat.repository.ChatMessageRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.messaging.simp.SimpMessagingTemplate;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
@RequiredArgsConstructor
public class ChatService {

    private final SimpMessagingTemplate messagingTemplate;
    private final ChatMessageRepository chatMessageRepository;

    /**
     * Sends a message from one user to another and saves it to the database.
     *
     * @param senderId The ID of the user sending the message.
     * @param request  The DTO containing the message content and recipient.
     */
    public void sendMessage(Long senderId, ChatMessageDto request) {
        // A consistent chat room ID is generated by ordering the user IDs.
        String chatRoomId = generateChatRoomId(senderId, request.getRecipientId());

        ChatMessage message = ChatMessage.builder()
                .chatRoomId(chatRoomId)
                .senderId(senderId)
                .recipientId(request.getRecipientId())
                .content(request.getContent())
                .build();

        // Save the message to MongoDB
        chatMessageRepository.save(message);

        // Send the message to the recipient's private queue.
        // The path "/queue/messages" is a private destination for the user.
        messagingTemplate.convertAndSendToUser(
                request.getRecipientId().toString(), 
                "/queue/messages", 
                message
        );
    }

    /**
     * Retrieves the chat history for a given chat room.
     *
     * @param user1Id The ID of the first user.
     * @param user2Id The ID of the second user.
     * @return A list of all messages in their chat history.
     */
    public List<ChatMessage> getChatHistory(Long user1Id, Long user2Id) {
        String chatRoomId = generateChatRoomId(user1Id, user2Id);
        return chatMessageRepository.findByChatRoomIdOrderByTimestampAsc(chatRoomId);
    }

    // --- Private Helper Method ---
    private String generateChatRoomId(Long userId1, Long userId2) {
        // Ensures the chat room ID is always the same regardless of who sends the message
        if (userId1 > userId2) {
            return userId2 + "_" + userId1;
        }
        return userId1 + "_" + userId2;
    }
}